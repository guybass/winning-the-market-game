# Import libraries
import datetime
# Access the web
import webbrowser
# Take HTML txt by request
import requests
# Analyse data
import pandas as pd
import numpy as np
# Helps to wait for data to download
import time
import glob

# Set up global variables
endings = ["/income-statement?freq=Q", "/balance-sheet?freq=Q", "/cash-flow-statement?freq=Q",
               "/financial-ratios?freq=Q"]
basic = "https://www.macrotrends.net/stocks/charts/"
income_state_var = ['revenue', 'cost-goods-sold', 'gross-profit', 'research-development-expenses', \
                    'selling-general-administrative-expenses', 'other-operating-income-expenses', 'operating-expenses',\
                    'operating-income', 'total-non-operating-income-expense', 'pre-tax-income', \
                    'total-provision-income-taxes', 'income-after-taxes', 'other-income', \
                    'income-from-continuous-operations', 'income-from-discontinuous-operations', \
                    'net-income', 'ebitda', 'ebit', 'basic-shares-outstanding', 'shares-outstanding', \
                    'eps-basic-net-earnings-per-share', 'eps-earnings-per-share-diluted']

balace_seet_var = ['cash-on-hand', 'receivables-total', 'inventory', 'pre-paid-expenses', 'other-current-assets', \
                   'total-current-assets', 'net-property-plant-equipment', 'long-term-investments', \
                   'goodwill-intangible-assets-total', 'other-long-term-assets', 'total-long-term-assets', \
                   'total-assets', 'total-current-liabilities', 'long-term-debt', 'other-non-current-liabilities', \
                   'total-long-term-liabilities', 'total-liabilities', 'common-stock-net', \
                   'retained-earnings-accumulated-deficit', 'comprehensive-income', 'other-share-holders-equity', \
                   'total-share-holder-equity', 'total-liabilities-share-holders-equity']
cash_flow_var = ['net-income-loss', 'total-depreciation-amortization-cash-flow', 'other-non-cash-items', \
                 'total-non-cash-items', 'change-in-accounts-receivable', 'change-in-inventories', \
                 'change-in-accounts-payable', 'change-in-assets-liabilities', 'total-change-in-assets-liabilities', \
                 'cash-flow-from-operating-activities', 'net-change-in-property-plant-equipment', \
                 'net-change-in-intangible-assets', 'net-acquisitions-divestitures', \
                 'net-change-in-short-term-investments', 'net-change-in-long-term-investments', \
                 'net-change-in-investments-total', 'investing-activities-other', 'cash-flow-from-investing-activities'\
                 , 'net-long-term-debt', 'net-current-debt', 'debt-issuance-retirement-net-total', \
                 'net-common-equity-issued-repurchased', 'net-total-equity-issued-repurchased', \
                 'total-common-preferred-stock-dividends-paid', 'financial-activities-other', \
                 'cash-flow-from-financial-activities', 'net-cash-flow', 'stock-based-compensation', \
                 'common-stock-dividends-paid']
financial_ratios_var = ['current-ratio', 'long-term-debt-capital', 'debt-equity-ratio', 'gross-margin', \
                        'operating-margin', 'ebit-margin', 'ebitda-margin', 'pre-tax-profit-margin', 'net-profit-margin'\
                        , 'asset-turnover', 'inventory-turnover', 'receiveable-turnover', 'days-sales-in-receivables', \
                        'roe', 'return-on-tangible-equity', 'roa', 'roi', 'book-value-per-share', \
                        'operating-cash-flow-per-share', 'free-cash-flow-per-share', ]
verbs = [income_state_var, balace_seet_var, cash_flow_var, financial_ratios_var]


def convert_vars_to_datetime(var_s):
    """
    This function convert date of string type object to datetime
    :param var_s: list og strings
    :return: list of datetime
    """
    new_vars = []
    format_str = '%Y-%m-%d'  # The format
    for var in var_s:
        new_vars.append(datetime.datetime.strptime(var, format_str))
    return new_vars


def scrape_url(url, dates, index=1142):
    """
    THis function scrape a url
    :param url: string
    :param index: int control html
    :param dates: list of string
    :return: dictionary
    """
    # Set-up structure
    res, j, flag, tempo, n2 = {}, 0, False, {}, 0
    html = requests.get(url).text.split('\n')[index].split(",")

    for line in html:
        # Shows we first kind of data
        if " s: '" in line:
            flag, in_var = True, line[5:-1]
            res[in_var] = []
        # Check for valid data
        if flag and '"20' in line:
            n2, n1 = line.split(':')[0].strip('"'), line.split(':')[1].strip('}')
            # Empty data check
            if n1 == '""':
                tempo[n2] = np.nan
            else:
                if ';' in n1:
                    n1 = n1[:-4]
                n1 = n1.strip('"')
                if n1:
                    tempo[n2] = eval(n1)
                else:
                    tempo[n2] = np.nan
        # Control on data
        if flag and n2 == dates[-1]:
            for date in dates:
                if date not in tempo:
                    res[in_var].append(np.nan)
                else:
                    res[in_var].append(tempo[date])
            flag, tempo, n2 = False, {}, ""

    return res


def read_vars(ticker, name):
    """
    This function let's you read the dates where reports were made
    :param ticker: String
    :param name: String
    :return: List of Datetime
    """
    # Set-up path and results
    path, var_s = basic + ticker + "/" + name + endings[0], []

    # Take basic data and clean a bit
    html = requests.get(path).text.split('\n')[1153].split(',')[4:]

    # Clean the data out of the sorce
    for i, var in enumerate(html):
        if i%2 == 0:
            var_s.append(var[9:19])
    #var_s = convert_vars_to_datetime(var_s)
    return var_s


def read_company_data(name, ticker,n, dates_):
    """
    This function takes the data for a company based on the name and ticker
    :param name: string
    :param ticker: string
    :param n: int length of dates
    :param dates_: list of datetime
    :return: DataFrame
    """
    res = pd.DataFrame({'dates':dates_})
    for i in range(4):
        if i == 3: dt = scrape_url(basic + ticker+'/'+name+endings[i], dates_, 1134)
        else: dt = scrape_url(basic + ticker+'/'+name+endings[i], dates_)
        # build data
        keys = dt.keys()
        for verb in verbs[i]:
            if verb in keys:
                res[verb] = dt[verb][:n]
            else:
                res[verb] = np.array([np.nan for i in range(n)])
    return res


def scrape_a_company(ticker, name):
    """
    This function takes ticker and name and return data  frame of X variable.
    :param ticker: string
    :param name: string
    :return: DataFrame
    """
    # Read the time the company was made
    dates = read_vars(ticker, name)

    # Set parameters
    n = len(dates)

    # Set data
    data = read_company_data(name, ticker, n, dates)

    # Specify the name of the excel file
    file_name = name + "_" + ticker + "_" + "dataset_X" + '.csv'

    # saving the excelsheet
    data.to_csv(file_name)



# getting excel files from Directory and second path to read file
execl_path = r"C:\Users\AyeletRB\Desktop\win_the_market\Computer and teck tick and names"

# read all the files with extension .xlsx i.e. excel
filenames = glob.glob(execl_path + "\*.xlsx")
# for loop to iterate all excel files
for file in filenames:
    # reading excel files
    dt = pd.read_excel(file)
    for j in range(len(dt)):
        if counter == 0:
            scrape_a_company(dt['tickers'][j], dt['names'][j])
